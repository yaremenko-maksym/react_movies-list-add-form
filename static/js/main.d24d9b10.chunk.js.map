{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","urlValidator","str","match","NewMovie","state","isTitleErrorVisible","isImgUrlErrorVisible","isImdbUrlErrorVisible","isImdbIdErrorVisible","isImgUrlInvalid","isImdbUrlInvalid","isInputEmpty","value","inputName","errorName","setState","prevState","isUrlValid","handleSubmit","event","onAdd","props","newMovie","preventDefault","this","onSubmit","name","type","onChange","target","onBlur","classNames","disabled","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d24d9b10.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","/* eslint-disable no-console */\nimport { Component } from 'react';\nimport classNames from 'classnames';\n\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\ntype EmptyErrors = {\n  isTitleErrorVisible: boolean;\n  isImgUrlErrorVisible: boolean;\n  isImdbUrlErrorVisible: boolean;\n  isImdbIdErrorVisible: boolean;\n};\n\ntype ValidUrlErrors = {\n  isImgUrlInvalid: boolean;\n  isImdbUrlInvalid: boolean;\n};\n\ntype State = Movie & EmptyErrors & ValidUrlErrors;\n\nfunction urlValidator(str: string) {\n  // eslint-disable-next-line max-len\n  const validUrlRegex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  return str.match(validUrlRegex) || false;\n}\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleErrorVisible: false,\n    isImgUrlErrorVisible: false,\n    isImdbUrlErrorVisible: false,\n    isImdbIdErrorVisible: false,\n    isImgUrlInvalid: false,\n    isImdbUrlInvalid: false,\n  };\n\n  isInputEmpty = (value: string, inputName: string) => {\n    let errorName: string;\n\n    switch (inputName) {\n      case 'title':\n        errorName = 'isTitleErrorVisible';\n        break;\n\n      case 'imgUrl':\n        errorName = 'isImgUrlErrorVisible';\n        break;\n\n      case 'imdbUrl':\n        errorName = 'isImdbUrlErrorVisible';\n        break;\n\n      case 'imdbId':\n        errorName = 'isImdbIdErrorVisible';\n        break;\n\n      default:\n        return;\n    }\n\n    if (value) {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: false,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: true,\n      }));\n    }\n  };\n\n  isUrlValid = (value: string, inputName: string) => {\n    let errorName: keyof ValidUrlErrors;\n\n    switch (inputName) {\n      case 'imgUrl':\n        errorName = 'isImgUrlInvalid';\n        break;\n\n      case 'imdbUrl':\n        errorName = 'isImdbUrlInvalid';\n        break;\n\n      default:\n        return;\n    }\n\n    if (urlValidator(value)) {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: false,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: true,\n      }));\n    }\n  };\n\n  handleSubmit = (event: { preventDefault: () => void; }) => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    const { onAdd } = this.props;\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    event.preventDefault();\n\n    onAdd(newMovie);\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isTitleErrorVisible,\n      isImgUrlErrorVisible,\n      isImdbUrlErrorVisible,\n      isImdbIdErrorVisible,\n      isImdbUrlInvalid,\n      isImgUrlInvalid,\n    } = this.state;\n\n    return (\n      <form\n        onSubmit={(event) => {\n          this.handleSubmit(event);\n        }}\n        className=\"form\"\n      >\n        <h2 className=\"form__title\">\n          Add new movie form\n        </h2>\n\n        <label className=\"form__label\">\n          Title:\n          <input\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={({ target }) => {\n              this.setState({ title: target.value });\n            }}\n            onBlur={({ target }) => {\n              this.isInputEmpty(target.value, target.name);\n            }}\n            className={classNames(\n              'form__input',\n              { 'form__input--invalid': isTitleErrorVisible },\n            )}\n          />\n        </label>\n\n        {isTitleErrorVisible && (\n          <p className=\"form__error\">\n            * Title is required\n          </p>\n        )}\n\n        <label className=\"form__label\">\n          Description:\n          <input\n            name=\"description\"\n            type=\"text\"\n            value={description}\n            onChange={({ target }) => {\n              this.setState({ description: target.value });\n            }}\n            className=\"form__input\"\n          />\n        </label>\n\n        <label className=\"form__label\">\n          Image URL:\n          <input\n            name=\"imgUrl\"\n            type=\"text\"\n            value={imgUrl}\n            onChange={({ target }) => {\n              this.setState({ imgUrl: target.value });\n            }}\n            onBlur={({ target }) => {\n              this.isInputEmpty(target.value, target.name);\n              this.isUrlValid(target.value, target.name);\n            }}\n            className={classNames(\n              'form__input',\n              {\n                'form__input--invalid': (isImgUrlErrorVisible\n                  || isImgUrlInvalid),\n              },\n            )}\n          />\n        </label>\n\n        {isImgUrlErrorVisible && (\n          <p className=\"form__error\">\n            * Image URL is required\n          </p>\n        )}\n\n        {isImgUrlInvalid && (\n          <p className=\"form__error\">\n            * Image URL is not valid\n          </p>\n        )}\n\n        <label className=\"form__label\">\n          IMDB URL:\n          <input\n            name=\"imdbUrl\"\n            type=\"text\"\n            value={imdbUrl}\n            onChange={({ target }) => {\n              this.setState({ imdbUrl: target.value });\n            }}\n            onBlur={({ target }) => {\n              this.isInputEmpty(target.value, target.name);\n              this.isUrlValid(target.value, target.name);\n            }}\n            className={classNames(\n              'form__input',\n              {\n                'form__input--invalid': (isImdbUrlErrorVisible\n                  || isImdbUrlInvalid),\n              },\n            )}\n          />\n        </label>\n\n        {isImdbUrlErrorVisible && (\n          <p className=\"form__error\">\n            * IMDB URL is required\n          </p>\n        )}\n\n        {isImdbUrlInvalid && (\n          <p className=\"form__error\">\n            * IMDB URL is not valid\n          </p>\n        )}\n\n        <label className=\"form__label\">\n          IMDB ID:\n          <input\n            name=\"imdbId\"\n            type=\"text\"\n            value={imdbId}\n            onChange={({ target }) => {\n              this.setState({ imdbId: target.value });\n            }}\n            onBlur={({ target }) => {\n              this.isInputEmpty(target.value, target.name);\n            }}\n            className={classNames(\n              'form__input',\n              { 'form__input--invalid': isImdbIdErrorVisible },\n            )}\n          />\n        </label>\n\n        {isImdbIdErrorVisible && (\n          <p className=\"form__error\">\n            * IMDB ID is required\n          </p>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"form__submit\"\n          disabled={\n            (!title\n              || !imgUrl\n              || !imdbUrl\n              || !imdbId\n              || urlValidator(imdbUrl) === false\n              || urlValidator(imgUrl) === false) || false\n          }\n        >\n          Submit\n        </button>\n\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    // put your code here\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}