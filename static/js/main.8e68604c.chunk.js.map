{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovieForm/NewMovieForm.tsx","functions/urlValidator.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovieForm","isTitleErrorVisible","isImgUrlErrorVisible","isImdbUrlErrorVisible","isImdbIdErrorVisible","isImdbUrlInvalid","isImgUrlInvalid","isSubmited","isSubmitDisabled","isInputEmpty","isUrlValid","handleSubmit","changeInputValue","onSubmit","event","name","type","value","onChange","target","onBlur","classNames","disabled","urlValidator","str","match","NewMovie","state","inputName","errorName","setState","prevState","preventDefault","onAdd","props","this","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e68604c.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\nimport { Movie } from '../../types/Movie';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { EmptyErrors, ValidUrlErrors } from '../../types/ErrorTypes';\nimport { Movie } from '../../types/Movie';\n\ntype Props = Movie & EmptyErrors & ValidUrlErrors & {\n  isSubmited: boolean;\n  isSubmitDisabled: boolean;\n  isInputEmpty: (value: string, inputName: string) => void\n  handleSubmit: (event: {\n    preventDefault: () => void;\n  }) => void;\n  isUrlValid: (value: string, inputName: string) => void;\n  changeInputValue: (value: string, inputName: string) => void;\n};\n\nexport const NewMovieForm: React.FC<Props> = ({\n  title,\n  description,\n  imgUrl,\n  imdbUrl,\n  imdbId,\n  isTitleErrorVisible,\n  isImgUrlErrorVisible,\n  isImdbUrlErrorVisible,\n  isImdbIdErrorVisible,\n  isImdbUrlInvalid,\n  isImgUrlInvalid,\n  isSubmited,\n  isSubmitDisabled,\n  isInputEmpty,\n  isUrlValid,\n  handleSubmit,\n  changeInputValue,\n}) => (\n  <form\n    onSubmit={(event) => {\n      handleSubmit(event);\n    }}\n    className=\"form\"\n  >\n    <h2 className=\"form__title\">\n      Add new movie form\n    </h2>\n\n    <label className=\"form__label\">\n      Title:\n      <input\n        name=\"title\"\n        type=\"text\"\n        value={title}\n        onChange={({ target }) => {\n          changeInputValue(target.value, target.name);\n        }}\n        onBlur={({ target }) => {\n          if (isSubmited) {\n            isInputEmpty(target.value, target.name);\n          }\n        }}\n        className={classNames(\n          'form__input',\n          { 'form__input--invalid': isTitleErrorVisible },\n        )}\n      />\n    </label>\n\n    {isTitleErrorVisible && (\n      <p className=\"form__error\">\n        * Title is required\n      </p>\n    )}\n\n    <label className=\"form__label\">\n      Description:\n      <input\n        name=\"description\"\n        type=\"text\"\n        value={description}\n        onChange={({ target }) => {\n          changeInputValue(target.value, target.name);\n        }}\n        className=\"form__input\"\n      />\n    </label>\n\n    <label className=\"form__label\">\n      Image URL:\n      <input\n        name=\"imgUrl\"\n        type=\"text\"\n        value={imgUrl}\n        onChange={({ target }) => {\n          changeInputValue(target.value, target.name);\n        }}\n        onBlur={({ target }) => {\n          if (isSubmited) {\n            isInputEmpty(target.value, target.name);\n            isUrlValid(target.value, target.name);\n          }\n        }}\n        className={classNames(\n          'form__input',\n          {\n            'form__input--invalid': (isImgUrlErrorVisible\n              || isImgUrlInvalid),\n          },\n        )}\n      />\n    </label>\n\n    {isImgUrlErrorVisible && (\n      <p className=\"form__error\">\n        * Image URL is required\n      </p>\n    )}\n\n    {isImgUrlInvalid && (\n      <p className=\"form__error\">\n        * Image URL is not valid\n      </p>\n    )}\n\n    <label className=\"form__label\">\n      IMDB URL:\n      <input\n        name=\"imdbUrl\"\n        type=\"text\"\n        value={imdbUrl}\n        onChange={({ target }) => {\n          changeInputValue(target.value, target.name);\n        }}\n        onBlur={({ target }) => {\n          if (isSubmited) {\n            isInputEmpty(target.value, target.name);\n            isUrlValid(target.value, target.name);\n          }\n        }}\n        className={classNames(\n          'form__input',\n          {\n            'form__input--invalid': (isImdbUrlErrorVisible\n              || isImdbUrlInvalid),\n          },\n        )}\n      />\n    </label>\n\n    {isImdbUrlErrorVisible && (\n      <p className=\"form__error\">\n        * IMDB URL is required\n      </p>\n    )}\n\n    {isImdbUrlInvalid && (\n      <p className=\"form__error\">\n        * IMDB URL is not valid\n      </p>\n    )}\n\n    <label className=\"form__label\">\n      IMDB ID:\n      <input\n        name=\"imdbId\"\n        type=\"text\"\n        value={imdbId}\n        onChange={({ target }) => {\n          changeInputValue(target.value, target.name);\n        }}\n        onBlur={({ target }) => {\n          if (isSubmited) {\n            isInputEmpty(target.value, target.name);\n          }\n        }}\n        className={classNames(\n          'form__input',\n          { 'form__input--invalid': isImdbIdErrorVisible },\n        )}\n      />\n    </label>\n\n    {isImdbIdErrorVisible && (\n      <p className=\"form__error\">\n        * IMDB ID is required\n      </p>\n    )}\n\n    <button\n      type=\"submit\"\n      className=\"form__submit\"\n      disabled={isSubmitDisabled}\n    >\n      Submit\n    </button>\n\n  </form>\n);\n","export function urlValidator(str: string) {\n  // eslint-disable-next-line max-len\n  const validUrlRegex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  return str.match(validUrlRegex) || false;\n}\n","import { Component } from 'react';\n\nimport './NewMovie.scss';\nimport { NewMovieForm } from '../NewMovieForm';\n\nimport { EmptyErrors, ValidUrlErrors } from '../../types/ErrorTypes';\nimport { Movie } from '../../types/Movie';\n\nimport { urlValidator } from '../../functions/urlValidator';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\ntype State = Movie & EmptyErrors & ValidUrlErrors & {\n  isSubmited: boolean;\n  isSubmitDisabled: boolean;\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleErrorVisible: false,\n    isImgUrlErrorVisible: false,\n    isImdbUrlErrorVisible: false,\n    isImdbIdErrorVisible: false,\n    isImgUrlInvalid: false,\n    isImdbUrlInvalid: false,\n    isSubmited: false,\n    isSubmitDisabled: false,\n  };\n\n  isInputEmpty = (value: string, inputName: string) => {\n    let errorName: string;\n\n    switch (inputName) {\n      case 'title':\n        errorName = 'isTitleErrorVisible';\n        break;\n\n      case 'imgUrl':\n        errorName = 'isImgUrlErrorVisible';\n        break;\n\n      case 'imdbUrl':\n        errorName = 'isImdbUrlErrorVisible';\n        break;\n\n      case 'imdbId':\n        errorName = 'isImdbIdErrorVisible';\n        break;\n\n      default:\n        return;\n    }\n\n    if (value) {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: false,\n        isSubmitDisabled: false,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: true,\n        isSubmitDisabled: true,\n      }));\n    }\n  };\n\n  isUrlValid = (value: string, inputName: string) => {\n    let errorName: keyof ValidUrlErrors;\n\n    switch (inputName) {\n      case 'imgUrl':\n        errorName = 'isImgUrlInvalid';\n        break;\n\n      case 'imdbUrl':\n        errorName = 'isImdbUrlInvalid';\n        break;\n\n      default:\n        return;\n    }\n\n    if (urlValidator(value)) {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: false,\n        isSubmitDisabled: false,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        ...prevState,\n        [errorName]: true,\n        isSubmitDisabled: true,\n      }));\n    }\n  };\n\n  handleSubmit = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    this.setState({ isSubmited: true });\n\n    if (!title) {\n      this.setState((state) => ({\n        ...state,\n        isTitleErrorVisible: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (!imdbId) {\n      this.setState((state) => ({\n        ...state,\n        isImdbIdErrorVisible: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (!imgUrl) {\n      this.setState((state) => ({\n        ...state,\n        isImgUrlErrorVisible: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (!imdbUrl) {\n      this.setState((state) => ({\n        ...state,\n        isImdbUrlErrorVisible: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (imgUrl && !urlValidator(imgUrl)) {\n      this.setState((state) => ({\n        ...state,\n        isImgUrlInvalid: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (imdbUrl && !urlValidator(imdbUrl)) {\n      this.setState((state) => ({\n        ...state,\n        isImdbUrlInvalid: true,\n        isSubmitDisabled: true,\n      }));\n    }\n\n    if (!title\n      || !imgUrl\n      || !imdbUrl\n      || !imdbId\n      || !urlValidator(imgUrl)\n      || !urlValidator(imdbUrl)) {\n      return;\n    }\n\n    const { onAdd } = this.props;\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      isSubmited: false,\n    });\n  };\n\n  changeInputValue = (value: string, inputName: string) => {\n    this.setState((state) => ({\n      ...state,\n      [inputName]: value,\n    }));\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isTitleErrorVisible,\n      isImgUrlErrorVisible,\n      isImdbUrlErrorVisible,\n      isImdbIdErrorVisible,\n      isImdbUrlInvalid,\n      isImgUrlInvalid,\n      isSubmited,\n      isSubmitDisabled,\n    } = this.state;\n\n    return (\n      <NewMovieForm\n        title={title}\n        description={description}\n        imgUrl={imgUrl}\n        imdbUrl={imdbUrl}\n        imdbId={imdbId}\n        isTitleErrorVisible={isTitleErrorVisible}\n        isImgUrlErrorVisible={isImgUrlErrorVisible}\n        isImdbUrlErrorVisible={isImdbUrlErrorVisible}\n        isImdbIdErrorVisible={isImdbIdErrorVisible}\n        isImdbUrlInvalid={isImdbUrlInvalid}\n        isImgUrlInvalid={isImgUrlInvalid}\n        isSubmited={isSubmited}\n        isSubmitDisabled={isSubmitDisabled}\n        isInputEmpty={this.isInputEmpty}\n        isUrlValid={this.isUrlValid}\n        handleSubmit={this.handleSubmit}\n        changeInputValue={this.changeInputValue}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}